# -*- coding: utf-8 -*-
"""Copy of DA450-Voice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jYAGEgG1kFqE4fdKJL0Oay3M564mPsnq
"""

!pip install librosa tensorflow

'''
from google.colab import files

uploaded = files.upload()  # Upload the zip files
'''

!unzip -q /content/M1.zip -d M1
!unzip -q /content/F1.zip -d F1

!mkdir M2 F2  # Create directories for extraction
!tar -xjf /content/M2.bz2 -C M2
!tar -xjf /content/F2.bz2 -C F2

!ls /content/M2/cmu_us_jmk_arctic/wav_M2
!ls /content/M1/cmu_us_bdl_arctic/orig_M1
!ls /content/F2/cmu_us_clb_arctic/wav_F2
!ls /content/F1/cmu_us_slt_arctic/orig_F1

'''
/content/M2/cmu_us_jmk_arctic/wav_M2,
/content/M1/cmu_us_bdl_arctic/orig_M1,
/content/F2/cmu_us_clb_arctic/wav_F2,
/content/F1/cmu_us_slt_arctic/orig_F1
'''

import os
import pandas as pd
import librosa
import numpy as np

import librosa.display
import matplotlib.pyplot as plt


def plot_combined_visualizations(file_path):
    y, sr = librosa.load(file_path, sr=None)

    # Short-Time Fourier Transform (Spectrogram)
    S = librosa.stft(y)
    S_db = librosa.amplitude_to_db(abs(S), ref=np.max)

    # Mel-Spectrogram
    mel_spectrogram = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=128)
    mel_spectrogram_db = librosa.power_to_db(mel_spectrogram, ref=np.max)

    # Chromagram
    chroma = librosa.feature.chroma_stft(y=y, sr=sr)

    # Plot combined visualizations
    fig, axs = plt.subplots(4, 1, figsize=(15, 12))

    # Waveform
    axs[0].set_title("Waveform")
    librosa.display.waveshow(y, sr=sr, ax=axs[0], color='blue')
    axs[0].set_xlabel("Time (s)")
    axs[0].set_ylabel("Amplitude")

    # Spectrogram
    axs[1].set_title("Spectrogram")
    img1 = librosa.display.specshow(S_db, sr=sr, x_axis='time', y_axis='log', cmap='viridis', ax=axs[1])
    fig.colorbar(img1, ax=axs[1], format='%+2.0f dB')
    axs[1].set_xlabel("Time (s)")
    axs[1].set_ylabel("Frequency (Hz)")

    # Mel-Spectrogram
    axs[2].set_title("Mel-Spectrogram")
    img2 = librosa.display.specshow(mel_spectrogram_db, sr=sr, x_axis='time', y_axis='mel', cmap='coolwarm', ax=axs[2])
    fig.colorbar(img2, ax=axs[2], format='%+2.0f dB')
    axs[2].set_xlabel("Time (s)")
    axs[2].set_ylabel("Frequency (Mel)")

    # Chromagram
    axs[3].set_title("Chromagram")
    img3 = librosa.display.specshow(chroma, sr=sr, x_axis='time', y_axis='chroma', cmap='plasma', ax=axs[3])
    fig.colorbar(img3, ax=axs[3])
    axs[3].set_xlabel("Time (s)")
    axs[3].set_ylabel("Pitch Class")

    # Adjust layout
    plt.tight_layout()
    plt.show()

# Example usage
plot_combined_visualizations('/content/M2/cmu_us_jmk_arctic/wav_M2/arctic_a0001.wav')

def extract_features(file_path):
    """
    Extract audio features from a given audio file.
    """
    try:
        y, sr = librosa.load(file_path, sr=None)  # Load audio file
        yin_fundamental = librosa.yin(y, fmin=librosa.note_to_hz('C2'), fmax=librosa.note_to_hz('C7'))

        features = {
            'meanfreq': np.mean(librosa.feature.spectral_centroid(y=y, sr=sr)),
            'sd': np.std(librosa.feature.spectral_centroid(y=y, sr=sr)),
            'median': np.median(librosa.feature.spectral_centroid(y=y, sr=sr)),
            'Q25': np.percentile(librosa.feature.spectral_centroid(y=y, sr=sr), 25),
            'Q75': np.percentile(librosa.feature.spectral_centroid(y=y, sr=sr), 75),
            'IQR': np.percentile(librosa.feature.spectral_centroid(y=y, sr=sr), 75) - np.percentile(librosa.feature.spectral_centroid(y=y, sr=sr), 25),
            'skew': np.mean(librosa.feature.spectral_flatness(y=y)),  # Approximation for skewness
            'kurt': np.mean(librosa.feature.spectral_bandwidth(y=y, sr=sr)),  # Approximation for kurtosis
            'sp.ent': np.mean(librosa.feature.spectral_contrast(y=y, sr=sr)),
            'sfm': np.mean(librosa.feature.spectral_flatness(y=y)),
            'mode': np.mean(librosa.feature.tonnetz(y=y, sr=sr)),  # Approximation for mode
            'centroid': np.mean(librosa.feature.spectral_centroid(y=y, sr=sr)),
            'peakf': np.max(librosa.feature.spectral_centroid(y=y, sr=sr)),
            'meanfun': np.mean(yin_fundamental),
            'minfun': np.min(yin_fundamental),
            'maxfun': np.max(yin_fundamental),
            'meandom': np.mean(librosa.feature.spectral_rolloff(y=y, sr=sr)),
            'mindom': np.min(librosa.feature.spectral_rolloff(y=y, sr=sr)),
            'maxdom': np.max(librosa.feature.spectral_rolloff(y=y, sr=sr)),
            'dfrange': np.max(librosa.feature.spectral_rolloff(y=y, sr=sr)) - np.min(librosa.feature.spectral_rolloff(y=y, sr=sr)),
            'modindx': np.mean(np.abs(np.diff(librosa.feature.spectral_centroid(y=y, sr=sr)))) / (np.max(librosa.feature.spectral_centroid(y=y, sr=sr)) - np.min(librosa.feature.spectral_centroid(y=y, sr=sr))),
        }
        return features
    except Exception as e:
        print(f"Error processing {file_path}: {e}")
        return None

# Process M1 and F1
males_data1 = process_audio_dataset('/content/M1/cmu_us_bdl_arctic/orig_M1', label='male')
females_data1 = process_audio_dataset('/content/F1/cmu_us_slt_arctic/orig_F1', label='female')

# Process M2 and F2
males_data2 = process_audio_dataset('/content/M2/cmu_us_jmk_arctic/wav_M2', label='male')
females_data2 = process_audio_dataset('/content/F2/cmu_us_clb_arctic/wav_F2', label='female')

# Combine all datasets
complete_data = pd.concat([males_data1, males_data2, females_data1, females_data2], ignore_index=True)

complete_data.to_csv('gender_audio_features.csv', index=False)

from google.colab import files
files.download('gender_audio_features.csv')

df= pd.read_csv('/content/gender_audio_features.csv')

df2= pd.read_csv('/content/voice.csv')

df.columns

df2.columns

len(df.columns)

len(df2.columns)

df.head()

df2.tail()

df2.head()

df2.tail()

!pip install ydata-profiling # Install the ydata-profiling package
from ydata_profiling import ProfileReport # Import the ProfileReport class

# Generate profile reports for both datasets
profile_df = ProfileReport(df, title="Profiling Report for df")
profile_df2 = ProfileReport(df2, title="Profiling Report for df2")

# Display the reports in the notebook
profile_df.to_notebook_iframe()  # Display profile for df
profile_df2.to_notebook_iframe()  # Display profile for df2

# Assuming 'complete_data' is your Pandas DataFrame
shuffled_data = complete_data.sample(frac=1, random_state=42)
# Reset index if needed
shuffled_data = shuffled_data.reset_index(drop=True)

shuffled_data.head()

shuffled_data.tail()

shuffled_data.to_csv('shuffled_data.csv', index=False)